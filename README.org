* Controlling LEDs over WiFi

  Uses ESP8266 that talks to 1 or more Pro Minis over I2c bus that have 2 16 bit resolution PWM pins.

  You can talk to ESP8266 over OSC (Open Sound Control) protocol and tell it to change brightness of LEDs.

** Hardware
   - ESP8266 (I use D1 mini)
   - Arduino Pro Mini. I have some clones. I use 5V 16Mhz 168 version. It works on 3v3 for me, so no need for i2c power level converters.

** Setup
   SSID and password for WiFi network is defined in "esp8266_osc_server/src/wifi_network.h", use wifi_network_example.h as a reference.

   Pin 6 on Pro mini defines which address it's going to use, either 8 or 12.

** Upload firmware
   1. Install platformio

   2. Run this in esp8266_osc_server and i2c_leds_controller directories to compile and upload to corresponding controller

      #+BEGIN_SRC bash
      platformio run -t upload --upload-port /dev/ttyUSB0
      #+END_SRC

      Replace /dev/ttyUSB0 with your UART or remove it and --upload-port argument and hope platformio guesses correctly.
** OSC
   Routes used are "led/1" through "led/4" for controlling each led.
   There is also "log/1" through "log/4" for controlling them in some kind of logarithmic scale.

   Routes accept integers from 0 to 65536 or floats from 0 to 1.

   Default port is 8888 and right now it's hardcoded.

   for now OSC server assumes it has 2 i2c LED controllers connected on hardcoded addresses, it's fine for me for now.
** Example in Python 3
   Here is an example of a program in Python that could control it (stolen from [[https://github.com/attwad/python-osc][python-osc library page]]). It's going to flicker some LED a bit.

   First install python-osc with
   #+BEGIN_SRC bash
   pip3 install python-osc
   #+END_SRC
   and then run it with

   #+BEGIN_SRC bash
   python3 example.py --ip YOUR_IP_ADDRESS --port 8888
   #+END_SRC

   #+BEGIN_SRC python
"""Small example OSC client

This program sends 10 random values between 0.0 and 1.0 to the /filter address,
waiting for 1 seconds between each value.
"""
import argparse
import random
import time

from pythonosc import osc_message_builder
from pythonosc import udp_client


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--ip", default="127.0.0.1",
                        help="The ip of the OSC server")
    parser.add_argument("--port", type=int, default=5005,
                        help="The port the OSC server is listening on")
    args = parser.parse_args()

    client = udp_client.SimpleUDPClient(args.ip, args.port)

    for x in range(1000):
        client.send_message("/log/1", random.random())

   #+END_SRC
** Software I've tested with it
*** Ableton Live
    OSCBuddy is a nice device for max4live, you can [[https://gumroad.com/l/UCvKN][find it here]] for a small donation or for free.
*** Clean OSC by Anton Heestand
    by [[https://twitter.com/Heestand][Anton Heestand]]

    iOS: https://itunes.apple.com/fi/app/clean-osc/id1235192209

    It seems to be also available for Android, just search Google Store
** Things to do
*** TODO Add ability to change LED options on Pro Mini via OSC
*** TODO Add dithering?
*** TODO Add easing for more graduate color change on pro mini?
    Rough number of loop cycles between messages from esp8266 = 1400
    lowest is about 400
*** TODO Optionally fade after each message with specified rate
*** TODO Ability to discover IP address of ESP8266 OSC server
    Possible options:
    - Use an LCD screen to display it.
    - mDNS?
    - Broadcast something on the network?
*** TODO Ability to set i2c address on Pro Mini in runtime
    Right now it's hardcoded and I need to reupload firmware to change i2c address, which is inconvenient. It could check state of some pin to determine address it should use
*** TODO Status LEDs for debugging?
    - Is it connected to WiFi?
    - Error rate?
